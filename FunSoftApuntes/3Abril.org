* Resumen
** Senyales
   #+BEGIN_SRC C 
   signal(int signo, manejador);
   #+END_SRC
*** Manejo del tiempo
**** Alarm

    Programa un temporizador. Si anyadimos un pause() esperara
    una senyal. La senyal que manda alarm es SIGALRM al terminar.
    A continuacion se muestra un pequenyo ejemplo de un temporizador
    periodico.
   #+BEGIN_SRC C 
   void manejador(int signal){
        alarm(5);
	signal(SIGALRM, manejador);
    }
    int main(){
        signal(SIGALRM, manejador);
        alarm(5);
	while(1){
	    pause();
	}
    }
     #+END_SRC
    Este ejemplo presenta el inconveniente de que hay un delay en el
    tiempo de ejecucion, por lo que vamos a ir acumulando error.
**** Temporizadores
    #+BEGIN_SRC C
    int setitimer(int tipo, const struct itimerval *value, struct itimerval *anterior);
    #+END_SRC
    Devuelve:
        - -1 cuando peta.
	- 0 cuando ejecuta OK.
    

    Parametros:
        - ITIMER_REAL: Dispara SIGALRM.

	- ITIMER_VIRTUAL: Tiempo que esta el proceso en ejecucion,
	  solo con codigo del usuario. Es decir, el tiempo que tarda
	  en hacer llamadas al sistema no cuenta. Dispara SIGVALARM.

	  
	- ITIMER_PROF: Tiempo que el proceso se esta ejecutando 
	  (usuario + kernel). Dispara SIGPROF.

	- Treal > Tprof > Tvirtual 
	
	#+BEGIN_SRC C
	struct itimerval{
	    struct timerval it_value; // Cuando se produce el primer disparo
	    struct timerval it_interval; // Cuando se produce el siguiente
	}

	
	struct timeval{
	    long tv_sec;  // Segundos
	    long tv_usec; // Microsegundos - S/1,000,000
	}
	#+END_SRC 
	
    El temporizador se desactiva cuando se arma con el valor 0.
    El kernel revisa eventos cada 10ms, aunque esto es ajustable.

*** Maquinas de estado
   
   Se usan para gestionar los estados de los protocolos.
   - Existen 2 implementaciones tipicas:
     - switch / case anidados // La que usaremos normalmente
     - tabla de punteros a funciones // Implementacion mas dificil
   
***** Ejemplo
     #+BEGIN_SRC C
     #define E1 0 // 1er evento
     #define E2 1 // 2do evento
     .
     .
     .
     #define EN N-1 // N evento
     
     #define EV0 0 // 1er evento
     #define EV1 1 // 2do evento
     
     estado = Estado_inicial;
     
     while(1){
         evento = espera_evento();
	 switch(estado){
	     case E1:
	         switch(evento){
		     case EV1:
		         estado = E2;
			 break;
		     case EV2:
		         estado = E1;
			 break;
		 }
	     }
	     case E2:
	         switch(evento){
		     case EV1:
		         break;
		     case EV2:
		         estado = E1;
			 break;
		 }
     }
     
     #+END_SRC 
