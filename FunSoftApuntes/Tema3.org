* Tema 3: Comunicaciones en red
** Introduccion:
*** Direcciones IP y Puertos:
    - Direccion IP: Nos sirve como direccion de la maquina.
      - Se compone de 4 numeros de 8 bits, formando un total de
        32 bits.
        = 192.168.1.1
    - Puertos: Identifica el proceso dentro de la maquina que 
      atiende a las peticiones.
      - Son de 16 bits.
      - Sus valores van desde 0 hasta 65535.
      - Identifican al proceso, ya que *dos procesos no pueden*
        *escuchar el mismo puerto*.
      - Algunos estan predefinidos por el sistema.
        - 8080: Servidor web.
        - 21: FTP.

    Al tener ambos procesos en distintas maquinas, pueden surgir
    conflictos:
    - Un int en la maquina A puede valer 4 bytes y en la maquina B
      8 bytes.
*** Tipos de enteros (std C99):
    Para evitar problemas de compatibilidad evitamos usar tipos como
    int, long, short, etc...

    - *#include <stdint.h>*:
      - Nos da tipos de enteros estandar como:
        - uint8_t / int8_t
        - uint16_t / int16_t
        - uint32_t / int32_t
        - uint64_t / int64_t
    - *#include <inttypes.h>*:
      - Nos permite imprimir los tipos de enteros estandar:
          #+BEGIN_SRC C
          uint64_t v = 6148914690091192593;
          printf("Valor = %"PRIu64" \n";
          #+END_SRC

*** Tipos de arquitectura:
    Existen los tipos *big-endian* y *little-endian* (network-byte-order).

    Si no se especifica lo contrario, los datos de mas de 1 byte se
    transforman a big-endian al transmitirse.
    Al recibirlo, el destino transforma de big-endian a su formato
    (host-byte-order)
**** Representacion en memoria:
     Vamos a representar el numero hexadecimal 0x0A0B0C0D. Es un *ejemplo*.
     |                 | 0x1100 | 0x1101 | 0x1102 | 0x1103 |
     |-----------------+--------+--------+--------+--------|
     | big - endian    |   0x0A |   0x0B |   0x0C |   0x0D |
     | little - endian |   0x0D |   0x0C |   0x0B |   0x0A |
     
     La mayor parte de procesadores de 16, 32 y 64 bits no permiten almacenar
     palabras en cualquier offset de memoria.

     Como resultado de esto *todo struct se ha de enviar campo a campo, nunca entero*.
**** Funciones de conversion:
     | h | host-byte-order    |
     | n | network-byte-order |
     | s | short (16 bytes)   |
     | l | long (32 bytes)    |
     #+BEGIN_SRC C
     uint16_t htons(uint16_t); /* Transforma del short de la maquina al short estandar para red */

     uint16_t ntohs(uint16_t); /* Transforma del short de estandar para red al short de la maquina */

     uint16_t htons(uint16_t); /* Transforma del long de la maquina al long estandar para red */
     
     uint32_t ntohs(uint16_t); /* Transforma del long del estandar de red al slong de la maquina*/

     /* Ejemplo */
     uint16_t datoParaEnviar = 0xFF00;
     uint16_t datoEnBigEndian = htons(datoParaEnviar);     
     #+END_SRC
** Sockets:
   Son puntos de comunicacion por los cuales un proceso puede enviar
   o recibir info a/desde otro proceso en una red.\\
   /Esto se hace por un canal bidireccional entre dos procesos y lo proporciona el SO./

   Son un conjunto de funciones para utilizar la capa de transporte (Nivel 4) de
   TCP/IP. Es un estandar compartido entre todos los SO.
   
*** Tipos:
**** UDP:
     Se utilizan para intercambiar mensajes completos, pero sin garantizar fiabilidad.
     Puede que la red pierda o desordene alguno de los mensajes.
     - No hace falta ninguna conexion previa con el destino, el mensaje se envia a su
       direccion utilizando los servicios de transporte (pero no hay garantia de si 
       se recibira este o no).
     - Por cada nuevo envio, se tiene que indicar la direccion del destino.
     - Por un mismo socket se puede enviar informacion a distintos destinatarios.
     - Por un mismo socket se puede recibir informacion de distintos emisores (es un buzon).
       - Utilizar un socket *UDP* es similar a *mandar una carta*.
**** TCP:
     Se utiliza para intercambiar secuencias de bytes de forma fiable. No hay que manejar
     errores introducidos por la red.
     - El servidor tiene que estar esperando una solicitud de conexion.
     - Solo hay que *indicar la direccion del destinatario al realizar la conexiond* (una sola vez).
     - Un socket solo sirve como canal bidireccional entre dos procesos que estan conectados
       (siempre los mismos mientras dure la conexion entre ellos).
       - Un socket *TCP* es similar a realizar una *llamada telefonica*.
*** Direcciones:

    Las aplicaciones que utilizan sockets necesitan poder especificar que IP y que puertos
    van a utilizar para comunicarse. Para esto tenemos el struct generico *sockaddr*.
    #+BEGIN_SRC C
    struct sockaddr{
    sa_family_t sa_family; /* Familia del socket: AF_XXX */
    uint8_t sa_data[14]; /* La direccion */
    };
    #+END_SRC
    Este struct nos permite indicar el tipo de direccion en el campo sa_family.
    - /Si el valor de esta es AF_INET (el que usaremos), el struct contendra una IP/
      /version 4 y un puerto/
    
    Las funciones del socket aceptan el tipo generico sockaddr. Por comodidad utilizaremos
    *sockaddr_in*, ya que viene con los campos listos para escribir direcciones IPv4 y puerto.

   #+BEGIN_SRC C
   struct in_addr {
   uint32_t s_addr; /* Direccion IP */
   };
   struct sockaddr_in{
   sa_family_t sin_family; /* La familia, que es AF_INET */
   uint16_t sin_port; /* Numero del puerto */
   struct in_addr sin_addr; /* Direccion IP */
   uint8_t sin_zero[8]; /* Relleno para cumplir tabla de datos, no se usa */
   };
   #+END_SRC
   *Ejemplo*:
  #+BEGIN_SRC C
  /* Pasos:
   * 1. Declarar la direccion
   * 2. Asignarle valores
   * 3. Declarar la IP (4 x 8 bytes)
   * 4. Pasar la IP a la direccion
   * 5. Castear para obtener la direccion generica que usaremos con socket */

  /* Declaramos la direccion */
  struct sockaddr_in dir_socket;
  /* Inicializamos la direccion */
  memset(&dir_socket, 0, sizeof(dir_socket));
  /* Asignamos el valor de la familia */
  dir_socket.sin_family = AF_INET;
  /* Transformamos la direccion del socket a network-byte-order */
  dir_socket.sin_port = htons(80);
  /* Declaramos un array de 4 ints de 8 bytes, segun el estandar */
  uint8_t dir_IP[4] = {198, 168, 3, 1};
  /* Pasamos la direccion IP a dir_socket */
  memcpy(&dir_socket.sin_addr, dir_IP, 4);
  /* Por ultimo obtenemos la direccion generica, que es lo que entrara
   * en las funciones de socket. Esta se obtiene haciendo un casting */
  struct sockaddr * dir_generica = (struct sockaddr *)&dirsocket;
  #+END_SRC
  - Dado que hay problemas de compatibilidad entre sistemas, todos los campos del
    struct sockaddr_in han de almacenarse en formato big-endian.
  - Cualquier dato que ocupe *mas de un byte* debera mandarse con el formato big-endian.
    - Aunque esto no es aplicable a las cadenas de caracteres, ya que cada char ocupa 1 byte.
  - En la direccion se puede especificar una IP, un puerto, ambos o ninguno.
    - Por ejemplo, si queremos solo el puerto le damos el valor: INADDR_ANY (cualquier IP).

*** Funciones para trabajar con IPV4:
    - *inet_addr()*: Convierte una direccion IP que esta en una cadena de caracteres a un
      entero de 32 bits en formato *big-endian*.
    #+BEGIN_SRC C
    uint32_t dir = inet_addr("192.168.1.1"); /* Introducimos la IP como cadena de chars */
    struct sockaddr_in destino; /* Declaramos una direccion donde guardarla */
    memcpy(&destino.sin_addr, &dir, 4); /* Copiamos la IP ya transformada a la variable de direccion */
    #+END_SRC
    - *inet_ntoa()*: convierte una direccion IP en formato entero de 32 bits a cadena de chars.
      (lo contrario a inet_addr()).
    #+BEGIN_SRC C
    printf("Direccion IP: %s\n", inet_ntoa(destino.sin_addr));
    #+END_SRC
*** Funciones de socket():
   #+BEGIN_SRC C 
   int socket(int familia, int tipo, int protocolo);
   #+END_SRC
   - *int familia*: Familia del protocolo. Para TCP/IP: *PF_INET*.
   - *int tipo*: 
     - Orientado a la conexion (TCP): SOCK_STREAM;
     - No orientado a la conexion (UDP): SOCK_DGRAM;
   - *int protocolo*: Lo pondremos a 0, ya que nos asigna por defecto
     el protocolo TCP para SOCK_STREAM y el protocolo UDP para SOCK_DGRAM.
   - *return*: Nos devuelve el descriptor del socket abierto, si este fue
     exitoso. Si hubo error devolvera -1.
   #+BEGIN_SRC C
   /* Abrir un socket para usar UDP */
   int sd = socket(PF_INET, SOCK_DGRAM, 0); /* En sd tenemos el descriptor del socket */
   /* Abrir un scoket para usar TCP */
   int sd = socket(PF_INET, SOCK_STREAM, 0);
   #+END_SRC
*** Funciones de bind():
   #+BEGIN_SRC C 
   int bind(int sd, sockaddr *dir, socklen_t longitud);
   #+END_SRC
   Se utiliza para  vincular un puerto con la aplicacion, asi el nivel de transporte
   sabra llegar al proceso a traves de dicho puerto.
   - *int sd*: Descriptor que abrimos anteriormente con socket().
   - *sockaddr \*dir*: Puntero al struct sockaddr que contiene el puerto.
   - *socklen_t longitud*: Tamanyo del struct de direccion.
   #+BEGIN_SRC C  
   /* Declaramos la estructura para la direccion */
   sockaddr_in dir_puerto; 
   /* Inicializamos la estructura */
   memset(&dir_puerto, 0, sizeof(dir_puerto));
   /* Asignamos la familia */
   dir_puerto.sin_family = AF_INET;
   /* Asignamos el puerto */
   dir_puerto.sin_port = htons(80); /* El puerto necesita ser transformado a big endian */
   /* Asignamos la IP */
   uint8_t dir[4] = { 192, 168, 1, 1}; /* 4 x 8 bytes = 32 bytes */
   memcpy(&dir_puerto.sin_addr, dir, 4);
   /* Abrimos un socket */
   int sd = socket(PF_INET, SOCK_DGRAM, 0);
   /* Vinculamos el puerto con el proceso */
   int result = bind(sd,(struct sockaddr*) &dir_puerto, sizeof(dir_puerto));
   #+END_SRC
** Sockets UDP:
*** Envio de datos con UDP: 
   #+BEGIN_SRC C
   int sendto(int sd, char *datos, size_t longitud, int opciones, struct sockaddr *dir_destino, socklen_t longitud dir);
   #+END_SRC
   - *int sd*: Descriptor de socket.
   - *char *datos*: Puntero a los datos a enviar.
   - *size_t longitud*: Longitud de los datos a enviar. 
   - *int opciones*: Opciones de envio (normalmente a 0)
   - *struct sockaddr * dir_destino*: Puntero a la direccion de destino.
   - *socklen_t longitud_dir*: Tamanyo de la direccion.
   - *return*: Devuelve el tamanyo de los datos enviados o -1 si hay error.
   
   *Ejemplo:*
   #+BEGIN_SRC C 
   char datos[512] = "Hola";
   sockaddr_in dir_destino;
   /* Rellenamos la estructura */
   /****************************/
   /* Enviamos los datos       */
   int bytesEnviados = sendto(sd, datos, strlen(datos), 0, (struct sockaddr *) &dir_destino, sizeof(dir_destino));
   #+END_SRC
*** Recepcion de datos con UDP:
   #+BEGIN_SRC C 
   int recvfrom(int sd, char * datos, size_t longitud, int opciones, struct sockaddr *dir_origen, socklen_t *longitud_dir);
   #+END_SRC
   - *int sd*: Descriptor de socket.
   - *char *datos*: Puntero a la direccion donde recibir los datos.
   - *size_t longitud*: Longitud maxima de datos a recibir. 
   - *int opciones*: Opciones de recepcion (normalmente a 0)
   - *struct sockaddr * dir_destino*: Puntero a la direccion de destino.
   - *socklen_t *longitud_dir*: _Direccion de memoria_ con el tamanyo de la direccion.
   - *return*: Devuelve el tamanyo de los datos recibidos o -1 si hay error.
   
   *Ejemplo*
  #+BEGIN_SRC C 
  char datos[512];
  sockaddr_in dir_origen;
  socklen_t longitud_direccion = sizeof(dir_origen);
  int bytesRecibidos = recvfrom(sd, datos, 512, 0, (struct sockaddr *) &dir_origen, &longitud_direccion);
  #+END_SRC
*** Cierre de Socket:
   #+BEGIN_SRC C 
   int close(int sd);
   #+END_SRC
   Libera los recursos asociados al socket.
   Al cerrar, ya no se pueden volver a realizar envios o recepciones. sendto() y recvfrom()
   devuelven -1.
** Ejemplos:
*** UDP Receptor:
  #+BEGIN_SRC C 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define PUERTO 4950 /* Puerto para el bind */
#define TBUFFER 100 /* Max tamanyo del buffer */

int main(){

  /* Declaramos las variables que vamos a necesitar */
  int descriptorSocket;
  struct sockaddr_in direccionReceptor;
  struct sockaddr_in direccionEmisor;
  socklen_t longitudDireccion;
  int numBytes; /* Numero de bytes leidos */
  char buffer[TBUFFER]; /* Buffer en el que recibir datos */

  /* Creacion del socket UDP */
  if((descriptorSocket = socket(PF_INET, SOCK_DGRAM, 0)) < 0){
    perror("Error en la creacion del socket");
    exit(-1);
  }
  /* Asignamos valores a la direccion del receptor */
  memset(&direccionReceptor, 0, sizeof(direccionReceptor));
  direccionReceptor.sin_family = AF_INET;
  direccionReceptor.sin_port = htons(PUERTO);
  direccionReceptor.sin_addr.s_addr = INADDR_ANY; /* Escucha por cualquier
                                                    tarjeta con una IP asignada */
  /* Hacemos el bind */
  if(bind(descriptorSocket, (struct sockaddr *)direccionReceptor, sizeof(direccionReceptor)) < 0){
    perror("Error al hacer bind()");
    exit(-1);
  }
  /* Sacamos la longitud de la direccion del emisor y recibimos datos de este */
  longitudDireccion = sizeof(direccionEmisor);
  if((numeroDeBytes = recvfrom(descriptorSocket, buffer, TBUFFER, 0,
                               (struct sockaddr *)&direccionEmisor,
                               (socklen_t *) &longitudDireccion)) < 0){
    perror("Error al recibir datos.");
    exit(-1);
  }

  /* Ya hemos recibido los datos, por lo que vamos a imprimirlos por pantalla */
  printf("Paquete recibido de %s\n", inet_ntoa(direccionEmisor.sin_addr)); /* Usamos inet_ntoa() para
                                                                              pasar de uint32_t a cadena
                                                                              de chars */
  printf("El paquete tiene %d bytes de longitud\n", numeroDeBytes);
  /* Le ponemos el \0 al buffer */
  buffer[numeroDeBytes] = '\0';
  printf("El paquete contiene esta cadena: %s\n", buffer);

  /* Cerramos el Socket */
  close(descriptorSocket);
  return 0;
}
  #+END_SRC
*** UDP Emisor:
   #+BEGIN_SRC C 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

#define PUERTO 4950 /* Puerto donde escucha el receptor */

int main(int argc, char *argv[]){

  /* Declaramos las variables que vamos a necesitar */
  int descriptorSocket;
  struct sockaddr_in direccionReceptor;
  int numBytes; /* Numero de bytes leidos */

  if(argc != 3){
    printf("Numero de argumentos invalido \n");
    exit(-1);
  }

  /* Obtenemos la IP del receptor de argv y la pasamos al
     formato necesario */
  uint32_t ip_receptor;
  if((ip_receptor = inet_addr(argv[1])) < 0){
    perror("inet_addr()");
    exit(-1);
  }

  /* Creamos el Socket UDP */
  if((descriptorSocket = socket(PF_INET, SOCK_DGRAM, 0)) < 0){
    perror("Socket");
    exit(-1);
  }

  /* Inicializamos la direccion del receptor y le asignamos valores */
  memset(&direccionReceptor, 0, sizeof(direccionReceptor));
  direccionReceptor.sin_family = AF_INET;
  direccionReceptor.sin_port = htons(PUERTO);
  memcpy(&direccionReceptor.sin_addr, &ip_receptor, 4);

  /* Enviamos con sendto() */
  if((numBytes = sendto(descriptorSocket, argv[2], strlen(argv[2]), 0,
                        (struct sockaddr *) &direccionReceptor,
                        sizeof(direccionReceptor))) < 0){
    /* argv[2] es el mensaje a enviar */
    perror("Error al enviar con sendto()");
    exit(-1);
  }

  /* Ya tenemos los datos, por lo que vamos a imprimirlos */
  printf("Enviados %d bytes a la direccion %s\n", numBytes,
         inet_ntoa(direccionReceptor.sin_addr));
  /* Cerramos el Socket */
  close(descriptorSocket);
  return 0;
}
   #+END_SRC
